/*
    @author:    Gabriel FÃ©lix
    @date:      Feb/21
*/

T   [H][T]  <-  Table to store job id in each slot.
OFt [H]     <-  Fenwick Trees to store slot status (1 == free, 0 == occupied).
CFt [H]     <-  Fenwick Trees to store current costs (0 == occupied, dif0 == cost).
P           <-  Sort(P) in non-increasing order.
F           <-  map[procTime] -> job id.


for each p in P:

    for each h in H:
        Lph <- /* List */ (Priority Queue) of cost of free locations [a, b] in machine "h" which have exactly "p" available slots (i.e. b - a == p). 
        /* 
            "Lph BUILD METHOD":
            for i = 0 ... (N - p):
                Binary search to find free location [i, POS], which POS is the first position which accepts "p" p_time. Cost: O(log N * log N).
                if(Found free location)
                    Calculate cost in O(log T) using CFt[h]. Cost: O(log T).          
        */
        
    for each j in F(p):
        
        minLocation = INF  /* A structure which stores the global best free location (with minimal cost price) */
        for h in H:
            /* for each location in Lph: */
            minLocation = min(minLocation, location_h.top())
            
        if minLocation == INF
            return Empty Schedule  
        
        Delete Lph (List of free locations of machine "h", the minLocation machine).
        
        Assign job j to minLocation.
        /*             
           "Job j ASSIGNMENT METHOD":
                Assign job j positions in Table T[h]             ->   Cost:  O(minLocation slots)
                Assign minLocation slots as "occupied" at OFt[h] ->   Cost:  O(minLocation slots * log N)
                Assign cost = 0 in minLocation slots at CFt[h]   ->   Cost:  O(minLocation slots * log N)
        */
        
        Recreate Lph using "Lph BUILD METHOD".

If S is a split-schedule
    Convert into a feasible schedule S.     Cost: O(N * H)
    


    
    
